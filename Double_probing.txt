#include <iostream>
using namespace std;

#define TABLE_SIZE 10 // Define the size of the hash table
#define EMPTY -1      // Define a marker for empty slots in the hash table

// Hash function 1: Primary hash function
int hash1(int key) {
    return key % TABLE_SIZE;
}

// Hash function 2: Secondary hash function (ensures non-zero value)
int hash2(int key) {
    return 7 - (key % 7);
}

// Insert a key into the hash table using double hashing
void insert(int table[], int key) {
    int index = hash1(key); // Primary hash function

    if (table[index] == EMPTY) {
        // Slot is empty, directly insert
        table[index] = key;
    } else {
        // Slot is occupied, resolve collision using double hashing
        int step = hash2(key); // Secondary hash function
        int i = 1;            // Step multiplier

        while (true) {
            int newIndex = (index + i * step) % TABLE_SIZE;
            if (table[newIndex] == EMPTY) {
                table[newIndex] = key;
                break;
            }
            i++;

            if (i == TABLE_SIZE) {
                cout << "Error: Hash table is full!" << endl;
                return;
            }
        }
    }
}

// Display the hash table
void display(int table[]) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (table[i] == EMPTY)
            cout << i << ": EMPTY" << endl;
        else
            cout << i << ": " << table[i] << endl;
    }
}

int main() {
    int table[TABLE_SIZE];

    // Initialize the hash table with EMPTY markers
    for (int i = 0; i < TABLE_SIZE; i++) {
        table[i] = EMPTY;
    }

    // Test the insertion function
    insert(table, 12);
    insert(table, 22);
    insert(table, 32);
    insert(table, 42);
    insert(table, 52);
    insert(table, 14);
    insert(table, 25);

    // Display the hash table
    display(table);

    return 0;
}